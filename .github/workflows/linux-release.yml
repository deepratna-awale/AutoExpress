name: Build Linux Release

on:
  workflow_call:
    inputs:
      tag_name:
        required: true
        type: string
        description: 'The tag name for the release'
    outputs:
      artifact_name:
        description: 'Name of the Linux release artifact'
        value: ${{ jobs.build-linux.outputs.artifact_name }}

jobs:
  build-linux:
    runs-on: ubuntu-latest
    outputs:
      artifact_name: ${{ steps.set_output.outputs.artifact_name }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-venv rsync
      
      - name: Create virtual environment and install dependencies
        run: |
          ls -la
          echo "$PWD"
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          deactivate
          cd ..
          echo "Changed directory to $PWD"

      - name: Create Linux release package
        run: |
          version="${{ inputs.tag_name }}"

          version_clean=$(echo "$version" | tr '.' '_')
          folder="autoexpress-${version_clean}-Linux"

          # Create the release folder
          mkdir -p "$folder"

          # Copy all files except excluded ones
          rsync -av --exclude='.git' --exclude='__pycache__' --exclude='*.pyc' --exclude='.github' --exclude='$folder/' . "$folder/"

          # Check if RELEASE_README.md exists and copy/rename it
          if [ -f "$folder/RELEASE_README.md" ]; then
            mv "$folder/RELEASE_README.md" "$folder/README.md"
          else
            echo "Warning: RELEASE_README.md not found"
          fi

          # Make run script executable
          if [ -f "$folder/run.sh" ]; then
            chmod +x "$folder/run.sh"
          else
            echo "Warning: run.sh not found"
          fi

          # Archive the folder
          zip -r "${folder}_Release.zip" "$folder"
      
      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-release
          path: autoexpress-*-Linux_Release.zip
          retention-days: 1
      
      - name: Set output
        id: set_output
        run: |
          version="${{ inputs.tag_name }}"
          version_clean=$(echo "$version" | tr '_' '.')
          echo "artifact_name=autoexpress-${version_clean}-Linux_Release.zip" >> $GITHUB_OUTPUT
